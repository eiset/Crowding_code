# Computation of queue length
intrm <- select(red, period.id, redarr, reddep) %>%
cbind(data_frame(redq = cumsum(red$redarr - red$reddep))) %>%
arrange(period.id) %>%
select(redq) %>%
mutate(redq = Lag(redq, shift = 1))
intrm[is.na(intrm)] <- 0
red <- select(red, period.id, redarr, reddep) %>%
cbind(., intrm)
rm(intrm, redpt.arr, redpt.dep)
# Data set: Capasity (cpsty) -------------------------------------------------------
# -*- The following code will need some modifications according to the specific setting -*-
cpsty <- select(dttmSft, tmin1, shift, dicdy.sft, dy.sft, period.id)
# Bed capacity - in the case of the presented study 19 beds were disposable in
# the ED
cpsty$bed <- rep(19, length = nrow(cpsty))
# Number of nurses on weekday day shift until 12 o'clock
cpsty$nrs[cpsty$tmin1 %in% c("07:00", "07:30", "08:00", "08:30","09:00",
"09:30", "10:00", "10:30","11:00", "11:30") &
cpsty$dicdy.sft == "weekday"] <- 7
# ...weekday day shift after 12 o'clock (until 14.59 o'clock)
cpsty$nrs[cpsty$tmin1 %in% c("12:00", "12:30", "13:00",
"13:30", "14:00", "14:30") &
cpsty$dicdy.sft == "weekday"] <- 8
# ...weekday evening shift until 20 o'clock
cpsty$nrs[cpsty$tmin1 %in% c("15:00", "15:30", "16:00", "16:30", "17:00",
"17:30", "18:00", "18:30", "19:00", "19:30") &
cpsty$dicdy.sft == "weekday"] <- 8
# ...weekday evening shift after 20 o'clock (until 22.59 o'clock)
cpsty$nrs[cpsty$tmin1 %in% c("20:00", "20:30", "21:00",
"21:30", "22:00", "22:30") &
cpsty$dicdy.sft == "weekday"] <- 7
# ...weekday night shift (Sunday night are considered weekday)
cpsty$nrs[cpsty$shift == "night" & cpsty$dicdy.sft == "weekday"] <- 4
# Number of nurses on weekends day shift until 11 o'clock
cpsty$nrs[cpsty$tmin1 %in% c("07:00", "07:30", "08:00", "08:30",
"09:00", "09:30", "10:00", "10:30") &
cpsty$dicdy.sft == "weekend"] <- 7
# ...weekends day shift after 11 o'clock (until 14.59 o'clock)
cpsty$nrs[cpsty$tmin1 %in% c("11:00", "11:30", "12:00", "12:30",
"13:00", "13:30", "14:00", "14:30") &
cpsty$dicdy.sft == "weekend"] <- 8
# ...weekends evening shift until 20 o'clock
cpsty$nrs[cpsty$tmin1 %in% c("15:00", "15:30", "16:00", "16:30", "17:00",
"17:30", "18:00", "18:30", "19:00", "19:30") &
cpsty$dicdy.sft == "weekend"] <- 8
# ...weekends evening shift after 20 o'clock (until 22.59 o'clock)
cpsty$nrs[cpsty$tmin1 %in% c("20:00", "20:30", "21:00",
"21:30", "22:00", "22:30") &
cpsty$dicdy.sft == "weekend"] <- 7
# ...weekends night shift (Friday and Saturday night are considered part of the
# weekend)
cpsty$nrs[cpsty$shift == "night" & cpsty$dicdy.sft == "weekend"] <- 5
cpsty <- select(cpsty, -c(tmin1, dy.sft))
# Data set: Black box maxq  ---------------------------------------------------------
# -*- The following code will need minor modifications according to the specific setting -*-
# Intermediate data set: Max queue for every day and every shift
intrm1 <- select(dttmSft, period.id, dte.sft, shift) %>%
left_join(., qblack, by = "period.id") %>%
group_by(dte.sft, shift) %>%
summarise(queue = max(queue))
# Intermediate data set: Max queue for patients triaged red for every day and every shift
intrm2 <- select(dttmSft, period.id, dte.sft, shift) %>%
left_join(., red, by = "period.id") %>%
group_by(dte.sft, shift) %>%
summarise(maxredq = max(redq))
# Intermediate data set: Mean triage score of patients present in each time interval
intrm3 <- distinct(pers, visit.id) %>%
group_by(period.id) %>%
summarise(tri.scr = mean(triage.scr, na.rm = TRUE)) %>%
left_join(select(dttmSft, dte.sft, shift, period.id), .,
by = "period.id") %>%
group_by(dte.sft, shift) %>%
summarise(mntriscr = max(tri.scr, na.rm = TRUE))
# The final data set
maxq <- left_join(intrm1, intrm2, by = c("dte.sft", "shift")) %>%
left_join(., intrm3, by = c("dte.sft", "shift")) %>%
mutate(dy.sft = weekdays(dte.sft)) %>%
unite(intrm, shift, dy.sft, sep = "_", remove = FALSE) %>%
mutate(dicdy.sft = ifelse(dy.sft %in% c("Saturday", "Sunday"),
"weekend", "weekday")) %>%
mutate(dicdy.sft = ifelse(intrm == "night_Friday", "weekend",
ifelse(intrm == "night_Sunday", "weekday",
ifelse(dicdy.sft == "weekday", "weekday",
"weekend")))) %>%
mutate(mnth.sft = months(as.Date(as.character(dte.sft)))) %>%
mutate(season = ifelse(
mnth.sft %in% c("April", "May", "June", "July", "August", "September"),
"summer",
"winter")) %>%
select(-intrm) %>%
ungroup() %>%
filter(!dte.sft == "9999-01-01") # to allow for steady state the first 24-hours are ignored
rm(intrm1, intrm2, intrm3)
setwd("/home/ahe/Git/Crowding_code")
library(dplyr)
library(tidyr)
library(lubridate)
library(Hmisc)
df.pers <- read.csv(file = "./example_data.csv",
sep = ",",
stringsAsFactor = FALSE,
header = TRUE)
# Data frame with dates and time (dttm) intervals ----------------------------------------------------
# Every day in the study period must be divided into intervals of 30 minutes.
# Each patient included are followed until departure from the ED.
# Lines marked with "# NB!" are to be changed according to circumstances at the
# specific study site.
# Data frame with all relevant dates for all time intervals.
df.sum <- data.frame(
dte = rep(
seq(
from = as.Date(min(as.character(df.pers$arrival.dte))),
to = as.Date(max(as.character(df.pers$depart.dte))),
by = "day"
),
each = 48)
)
# Data frame with factor containing all the time intervals. Note the use of 24-hour
# notation
time <- data.frame(tm.intrvl = rep(
c("00:00-00:29", "00:30-00:59", "01:00-01:29", "01:30-01:59",
"02:00-02:29", "02:30-02:59", "03:00-03:29", "03:30-03:59",
"04:00-04:29", "04:30-04:59", "05:00-05:29", "05:30-05:59",
"06:00-06:29", "06:30-06:59", "07:00-07:29", "07:30-07:59",
"08:00-08:29", "08:30-08:59", "09:00-09:29", "09:30-09:59",
"10:00-10:29", "10:30-10:59", "11:00-11:29", "11:30-11:59",
"12:00-12:29", "12:30-12:59", "13:00-13:29", "13:30-13:59",
"14:00-14:29", "14:30-14:59", "15:00-15:29", "15:30-15:59",
"16:00-16:29", "16:30-16:59", "17:00-17:29", "17:30-17:59",
"18:00-18:29", "18:30-18:59", "19:00-19:29", "19:30-19:59",
"20:00-20:29", "20:30-20:59", "21:00-21:29", "21:30-21:59",
"22:00-22:29", "22:30-22:59", "23:00-23:29", "23:30-23:59")))
# A unique id variable "period.id" is created.
df.sum <- cbind(df.sum, time) %>%
unite(period.id, dte, tm.intrvl, sep = " - ", remove = FALSE)
rm(time)
# Data frame with all the relevant temporal subdivisions of the study period
dttm <- select(df.sum, period.id, dte, int = tm.intrvl) %>%
separate(int, into = c("tmin1", "tmin2"), sep = "-") %>%
mutate(dy = weekdays(as.Date(as.character(dte)))) %>%
mutate(mnth = months(as.Date(as.character(dte)))) %>%
mutate(dte = ymd(dte)) %>%
arrange(period.id)
# Categorical variable with shifts. # NB! Time period and shift should be altered
# according to local circumstances. Below is code provided if a hospital works
# in two shift routines as well as code for four shift routine.
dttm$shift <- ifelse(dttm$tmin1 %in% c("07:00", "07:30", "08:00", "08:30",
"09:00", "09:30","10:00", "10:30",
"11:00", "11:30", "12:00", "12:30",
"13:00", "13:30", "14:00", "14:30"),
"day", ifelse(dttm$tmin1 %in%
c("15:00", "15:30", "16:00", "16:30",
"17:00", "17:30","18:00", "18:30",
"19:00", "19:30", "20:00", "20:30",
"21:00", "21:30", "22:00", "22:30"),
"evening", "night"))
# Example with only day and night shift. By removing the "#" this code can be
# used instead of the above provided.
#dttm$shift <- ifelse(dttm$tmin1 %in% c("07:00", "07:30", "08:00", "08:30",
#                                      "09:00", "09:30","10:00", "10:30",
#                                     "11:00", "11:30", "12:00", "12:30",
#                                    "13:00", "13:30", "14:00", "14:30",
#                                   "15:00", "15:30", "16:00", "16:30",
#                                  "17:00", "17:30", "18:00", "18:30"),
#               "day", "night")
# Example with four shifts. By removing the "#" this code can be
# used instead of the above provided.
#dttm$shift <- ifelse(dttm$tmin1 %in% c("07:00", "07:30", "08:00", "08:30",
#                                      "09:00", "09:30", "10:00", "10:30",
#                                     "11:00", "11:30", "12:00", "12:30"),
#                  "day", ifelse(dttm$tmin1 %in%
#                                       c("13:00", "13:30", "14:00", "14:30",
#                                        "15:00", "15:30", "16:00", "16:30",
#                                       "17:00", "17:30", "18:00", "18:30"),
#                            "afternoon", ifelse(dttm$tmin1 %in% c("19:00", "19:30", "20:00", "20:30",
#                                                                 "21:00", "21:30", "22:00", "22:30",
#                                                                "23:00", "23:30", "00:00", "00:30"),
#                                             "evening", "night")))
# Dichotomous variable dividing days into weekday/weekend
dttm$dicdy <- ifelse(dttm$dy %in% c("Saturday", "Sunday"),
"weekend", "weekday")
# Dichotomous variable dividing the year into summer/winter
dttm$season <- ifelse(as.character(dttm$mnth) %in%
c("January", "February", "March",
"October", "November", "December"),
"winter", "summer")
# In the above created data frame (dttm) the divisions are based on the time of
# the day. In a clinical setting it is often more relevant to divide the day
# according to shifts (sft). This means that "a new day" begins with day shift at 7 a.m.
# and ends with the night shift ending at 06.59 a.m.
# Thus, the first 14 observations of the obtained data (from 00:00 until
# 06:59) belongs to the previous day - that is outside the study period. These
# observations needs to be excluded. Each day has three eight hour shifts
# (i.e. 16 30-minutes), for the year of 2013 this amounts to 3*16*365 = 17520
# observations which is used in the example below.
# Lines marked with "# NB!" are to be changed according to study period.
dttmSft <- select(dttm, period.id, tmin1, tmin2, shift) %>%
slice(1:c(3*16*365)) %>% # NB!
cbind(dte.sft = as.factor(rep(
seq(
from = as.Date("9999/01/01"), # NB!
to = as.Date("9999/12/31"), # NB!
by = "day"
),
each = 48))) %>%
mutate(dte.sft = as.Date(dte.sft)) %>%
mutate(dte.sft = Lag(dte.sft, shift = 14)) %>%
slice(- c(1:14)) %>%
mutate(dy.sft = weekdays(as.Date(as.character(dte.sft)))) %>%
mutate(dicdy.sft = ifelse(dy.sft %in% c("Saturday", "Sunday"),
"weekend", "weekday")) %>%
unite(intrm, shift, dy.sft, sep = "_", remove = FALSE) %>%
mutate(dicdy.sft = ifelse(intrm == "night_Friday", "weekend",
ifelse(intrm == "night_Sunday", "weekday",
ifelse(dicdy.sft == "weekday", "weekday",
"weekend")))) %>%
mutate(mnth.sft = months(as.Date(as.character(dte.sft)))) %>%
mutate(season = ifelse(
mnth.sft %in% c("April", "May", "June", "July", "August", "September"),
"summer", "winter")
) %>%
select(-intrm)
# Data set: The Blackbox model (arrival - departure)------------------------------
# Only patients in the relevant department ("6620378SKADE") in each 30-min. time interval
# are to be included. This should be modifyied to the department code of interest
pers <- df.pers[df.pers$first.location == "6620378SKADE" |
df.pers$last.location == "6620378SKADE", ] %>%
unite(period.id, dte, tm.intrvl, sep = " - ", remove = FALSE)
row.names(pers) <- NULL
# Arrival of a patient is by definition the first interval the patient is
# registered in the ED. Likewise, departure is in the last registered interval.
# The code below creates a dummy variable each patient that denotes the interval
# of arrival and departure (= 1) for each patient. All intervals where that
# particular patient did not arrive (or depart) is marked with zero.
minrec <- group_by(pers, visit.id) %>%
summarise(id = min(record.id))
pers <- mutate(pers, arrival = ifelse(record.id %in% minrec$id, 1, 0))
maxrec <- group_by(pers, visit.id) %>%
summarise(id = max(record.id))
pers <- mutate(pers, departure = ifelse(record.id %in% maxrec$id, 1, 0))
rm(minrec, maxrec)
# Patients arriving before the dayshift of the first day of the study period
# must be excluded (see discussion for dttmSft above)
intrm1 <- filter(dttm, dte == min(dttm$dte) &
shift == "night" &
!tmin1 %in% c("23:00", "23:30")) %>%
select(period.id)
intrm2 <- filter(pers, arrival == 1 & period.id %in% intrm1$period.id) %>%
select(visit.id)
pers <- filter(pers, !visit.id %in% intrm2$visit.id)
rm(intrm1, intrm2)
# Data set with summed arrivals and departures (sumad) and computated
# queues ("qblack")
tm <- select(df.sum, period.id)
sumad <- group_by(pers, period.id) %>%
summarise(arrivals = sum(arrival), departures = sum(departure)) %>%
left_join(tm, ., by = "period.id") %>%
arrange(period.id)
sumad[is.na(sumad)] <- 0
rm(tm)
intrm <- select(sumad, period.id, arrivals, departures) %>%
cbind(data_frame(queue = cumsum(sumad$arrivals - sumad$departures))) %>%
arrange(period.id) %>%
select(queue) %>%
mutate(queue = Lag(queue, shift = 1))
intrm[is.na(intrm)] <- 0
qblack <- select(sumad, period.id) %>%
cbind(., intrm)
rm(intrm)
# Data set: Patients triaged 1/"red" (redpt) -------------------------------------
redpt.arr <- data.frame(redarr = tapply(pers[pers$triage.scr == "1", ]$arrival,
pers[pers$triage.scr == "1", ]$period.id,
sum))
# "NA" indicates there are no patients with triage = 1 in that time interval. "0" indicates
# that there are patients that were given triage score = 1, but that they did not arrived in this
# particular time interval.
redpt.arr <- data.frame(period.id = as.character(rownames(redpt.arr)), redpt.arr)
# Proportion of patients triaged 1/"red"
redpt.dep <- data.frame(reddep = tapply(pers[pers$triage.scr == "1", ]$departure,
pers[pers$triage.scr == "1", ]$period.id,
sum))
redpt.dep <- data.frame(period.id = as.character(rownames(redpt.dep)), redpt.dep)
red <- left_join(redpt.arr, redpt.dep, by = "period.id")
red[is.na(red)] <- 0
# Computation of queue length
intrm <- select(red, period.id, redarr, reddep) %>%
cbind(data_frame(redq = cumsum(red$redarr - red$reddep))) %>%
arrange(period.id) %>%
select(redq) %>%
mutate(redq = Lag(redq, shift = 1))
intrm[is.na(intrm)] <- 0
red <- select(red, period.id, redarr, reddep) %>%
cbind(., intrm)
rm(intrm, redpt.arr, redpt.dep)
# Data set: Capasity (cpsty) -------------------------------------------------------
# -*- The following code will need some modifications according to the specific setting -*-
cpsty <- select(dttmSft, tmin1, shift, dicdy.sft, dy.sft, period.id)
# Bed capacity - in the case of the presented study 19 beds were disposable in
# the ED
cpsty$bed <- rep(19, length = nrow(cpsty))
# Number of nurses on weekday day shift until 12 o'clock
cpsty$nrs[cpsty$tmin1 %in% c("07:00", "07:30", "08:00", "08:30","09:00",
"09:30", "10:00", "10:30","11:00", "11:30") &
cpsty$dicdy.sft == "weekday"] <- 7
# ...weekday day shift after 12 o'clock (until 14.59 o'clock)
cpsty$nrs[cpsty$tmin1 %in% c("12:00", "12:30", "13:00",
"13:30", "14:00", "14:30") &
cpsty$dicdy.sft == "weekday"] <- 8
# ...weekday evening shift until 20 o'clock
cpsty$nrs[cpsty$tmin1 %in% c("15:00", "15:30", "16:00", "16:30", "17:00",
"17:30", "18:00", "18:30", "19:00", "19:30") &
cpsty$dicdy.sft == "weekday"] <- 8
# ...weekday evening shift after 20 o'clock (until 22.59 o'clock)
cpsty$nrs[cpsty$tmin1 %in% c("20:00", "20:30", "21:00",
"21:30", "22:00", "22:30") &
cpsty$dicdy.sft == "weekday"] <- 7
# ...weekday night shift (Sunday night are considered weekday)
cpsty$nrs[cpsty$shift == "night" & cpsty$dicdy.sft == "weekday"] <- 4
# Number of nurses on weekends day shift until 11 o'clock
cpsty$nrs[cpsty$tmin1 %in% c("07:00", "07:30", "08:00", "08:30",
"09:00", "09:30", "10:00", "10:30") &
cpsty$dicdy.sft == "weekend"] <- 7
# ...weekends day shift after 11 o'clock (until 14.59 o'clock)
cpsty$nrs[cpsty$tmin1 %in% c("11:00", "11:30", "12:00", "12:30",
"13:00", "13:30", "14:00", "14:30") &
cpsty$dicdy.sft == "weekend"] <- 8
# ...weekends evening shift until 20 o'clock
cpsty$nrs[cpsty$tmin1 %in% c("15:00", "15:30", "16:00", "16:30", "17:00",
"17:30", "18:00", "18:30", "19:00", "19:30") &
cpsty$dicdy.sft == "weekend"] <- 8
# ...weekends evening shift after 20 o'clock (until 22.59 o'clock)
cpsty$nrs[cpsty$tmin1 %in% c("20:00", "20:30", "21:00",
"21:30", "22:00", "22:30") &
cpsty$dicdy.sft == "weekend"] <- 7
# ...weekends night shift (Friday and Saturday night are considered part of the
# weekend)
cpsty$nrs[cpsty$shift == "night" & cpsty$dicdy.sft == "weekend"] <- 5
cpsty <- select(cpsty, -c(tmin1, dy.sft))
# Data set: Black box maxq  ---------------------------------------------------------
# -*- The following code will need minor modifications according to the specific setting -*-
# Intermediate data set: Max queue for every day and every shift
intrm1 <- select(dttmSft, period.id, dte.sft, shift) %>%
left_join(., qblack, by = "period.id") %>%
group_by(dte.sft, shift) %>%
summarise(queue = max(queue))
# Intermediate data set: Max queue for patients triaged red for every day and every shift
intrm2 <- select(dttmSft, period.id, dte.sft, shift) %>%
left_join(., red, by = "period.id") %>%
group_by(dte.sft, shift) %>%
summarise(maxredq = max(redq))
# Intermediate data set: Mean triage score of patients present in each time interval
intrm3 <- distinct(pers, visit.id) %>%
group_by(period.id) %>%
summarise(tri.scr = mean(triage.scr, na.rm = TRUE)) %>%
left_join(select(dttmSft, dte.sft, shift, period.id), .,
by = "period.id") %>%
group_by(dte.sft, shift) %>%
summarise(mntriscr = max(tri.scr, na.rm = TRUE))
# The final data set
maxq <- left_join(intrm1, intrm2, by = c("dte.sft", "shift")) %>%
left_join(., intrm3, by = c("dte.sft", "shift")) %>%
mutate(dy.sft = weekdays(dte.sft)) %>%
unite(intrm, shift, dy.sft, sep = "_", remove = FALSE) %>%
mutate(dicdy.sft = ifelse(dy.sft %in% c("Saturday", "Sunday"),
"weekend", "weekday")) %>%
mutate(dicdy.sft = ifelse(intrm == "night_Friday", "weekend",
ifelse(intrm == "night_Sunday", "weekday",
ifelse(dicdy.sft == "weekday", "weekday",
"weekend")))) %>%
mutate(mnth.sft = months(as.Date(as.character(dte.sft)))) %>%
mutate(season = ifelse(
mnth.sft %in% c("April", "May", "June", "July", "August", "September"),
"summer",
"winter")) %>%
select(-intrm) %>%
ungroup() %>%
filter(!dte.sft == "9999-01-01") # to allow for steady state the first 24-hours are ignored
rm(intrm1, intrm2, intrm3)
intrm1 <- select(dttmSft, period.id, dte.sft, shift) %>%
left_join(., qblack, by = "period.id") %>%
group_by(dte.sft, shift) %>%
summarise(queue = max(queue))
# Intermediate data set: Max queue for patients triaged red for every day and every shift
intrm2 <- select(dttmSft, period.id, dte.sft, shift) %>%
left_join(., sumad, by = "period.id")
# The final data set
test <- left_join(dttmSft, qblack, by = "period.id") %>%
left_join(., sumad, by = "period.id") %>%
mutate(dy.sft = weekdays(dte.sft)) %>%
unite(intrm, shift, dy.sft, sep = "_", remove = FALSE) %>%
mutate(dicdy.sft = ifelse(dy.sft %in% c("Saturday", "Sunday"),
"weekend", "weekday")) %>%
mutate(dicdy.sft = ifelse(intrm == "night_Friday", "weekend",
ifelse(intrm == "night_Sunday", "weekday",
ifelse(dicdy.sft == "weekday", "weekday",
"weekend")))) %>%
mutate(mnth.sft = months(as.Date(as.character(dte.sft)))) %>%
mutate(season = ifelse(
mnth.sft %in% c("April", "May", "June", "July", "August", "September"),
"summer",
"winter")) %>%
select(-intrm) %>%
ungroup() %>%
mutate(lag.arr = Lag(arrivals, shift = 1))
filter(!dte.sft == "9999-01-01")
View(test)
intrm1 <- select(dttmSft, period.id, dte.sft, shift) %>%
left_join(., qblack, by = "period.id") %>%
group_by(dte.sft, shift) %>%
summarise(queue = max(queue))
# Intermediate data set: Max queue for patients triaged red for every day and every shift
intrm2 <- select(dttmSft, period.id, dte.sft, shift) %>%
left_join(., sumad, by = "period.id")
# The final data set
test <- left_join(dttmSft, qblack, by = "period.id") %>%
left_join(., sumad, by = "period.id") %>%
mutate(dy.sft = weekdays(dte.sft)) %>%
unite(intrm, shift, dy.sft, sep = "_", remove = FALSE) %>%
mutate(dicdy.sft = ifelse(dy.sft %in% c("Saturday", "Sunday"),
"weekend", "weekday")) %>%
mutate(dicdy.sft = ifelse(intrm == "night_Friday", "weekend",
ifelse(intrm == "night_Sunday", "weekday",
ifelse(dicdy.sft == "weekday", "weekday",
"weekend")))) %>%
mutate(mnth.sft = months(as.Date(as.character(dte.sft)))) %>%
mutate(season = ifelse(
mnth.sft %in% c("April", "May", "June", "July", "August", "September"),
"summer",
"winter")) %>%
select(-intrm) %>%
ungroup() %>%
mutate(lag.arr = Lag(arrivals, shift = 1)) %>%
mutate(lag.dep = Lag(departures, shift = 1)) %>%
mutate(lag.queue = Lag(queue, shift = 1)) %>%
filter(!dte.sft == "9999-01-01")
View(test)
test <- left_join(dttmSft, qblack, by = "period.id") %>%
left_join(., sumad, by = "period.id") %>%
mutate(dy.sft = weekdays(dte.sft)) %>%
unite(intrm, shift, dy.sft, sep = "_", remove = FALSE) %>%
mutate(dicdy.sft = ifelse(dy.sft %in% c("Saturday", "Sunday"),
"weekend", "weekday")) %>%
mutate(dicdy.sft = ifelse(intrm == "night_Friday", "weekend",
ifelse(intrm == "night_Sunday", "weekday",
ifelse(dicdy.sft == "weekday", "weekday",
"weekend")))) %>%
mutate(mnth.sft = months(as.Date(as.character(dte.sft)))) %>%
mutate(season = ifelse(
mnth.sft %in% c("April", "May", "June", "July", "August", "September"),
"summer",
"winter")) %>%
select(-intrm) %>%
ungroup() %>%
mutate(lag.arr = Lag(arrivals, shift = 1)) %>%
mutate(lag.dep = Lag(departures, shift = 1)) %>%
mutate(lag.queue = Lag(queue, shift = 1)) %>%
filter(!dte.sft == "9999-01-01") %>%
group_by(dte.sft, shift) %>%
filter(queue == max(queue))
View(test)
View(test)
test <- left_join(dttmSft, qblack, by = "period.id") %>%
left_join(., sumad, by = "period.id") %>%
mutate(dy.sft = weekdays(dte.sft)) %>%
unite(intrm, shift, dy.sft, sep = "_", remove = FALSE) %>%
mutate(dicdy.sft = ifelse(dy.sft %in% c("Saturday", "Sunday"),
"weekend", "weekday")) %>%
mutate(dicdy.sft = ifelse(intrm == "night_Friday", "weekend",
ifelse(intrm == "night_Sunday", "weekday",
ifelse(dicdy.sft == "weekday", "weekday",
"weekend")))) %>%
mutate(mnth.sft = months(as.Date(as.character(dte.sft)))) %>%
mutate(season = ifelse(
mnth.sft %in% c("April", "May", "June", "July", "August", "September"),
"summer",
"winter")) %>%
select(-intrm) %>%
ungroup() %>%
mutate(lag.arr = Lag(arrivals, shift = 1)) %>%
mutate(lag.dep = Lag(departures, shift = 1)) %>%
mutate(lag.queue = Lag(queue, shift = 1)) %>%
filter(!dte.sft == "9999-01-01")#
m1 <- hurdle(departures ~ arrivals + queue | arrivals + queue,
data = test, dist = "negbin")
summary(m1)
library(pscl)
m1 <- hurdle(departures ~ arrivals + queue | arrivals + queue,
data = test, dist = "negbin")
summary(m1)
summary(m1)
m1 <- zeroinfl(departures ~ arrivals + queue | arrivals + queu,
data = test, dist = "negbin", EM = TRUE)
summary(m1)
summary(m1)
m1 <- zeroinfl(departures ~ arrivals + queue | arrivals + queu,
data = test, dist = "negbin", EM = TRUE)
m1 <- zeroinfl(departures ~ arrivals + queue | arrivals + queue,
data = test, dist = "negbin", EM = TRUE)
summary(m1)
m1 <- zeroinfl(departures ~ arrivals + queue | arrivals + queue,
data = test, dist = "negbin", EM = TRUE)
m2 <- zeroinfl(departures ~ arrivals + queue,
data = test, dist = "negbin")
summary(m2)
View(test)
summary(glm.nb(departures ~ arrivals + queue, data = test))
summary(glm.nb(departures ~ arrivals + queue, data = test))
m3 <- glm.nb(departures ~ arrivals + queue, data = test)
vuong(m1, m3)
voung(m2, m3)
vuong(m2, m3)
